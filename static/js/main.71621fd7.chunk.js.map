{"version":3,"sources":["pages/Calculate.js","App.js","reportWebVitals.js","index.js"],"names":["Calculate","useState","React","values","reqdata","setReqdata","useEffect","str","key","variables","serviceDescription","Grid","cols","gap","xAlign","breakpoint","xs","colgap","m","col","row","Text","view","font","size","weight","lineHeight","align","Card","verticalSpace","horizontalSpace","as","App","setPeople","axios","method","url","then","response","data","className","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71621fd7.chunk.js","sourcesContent":["import React, {Fragment, useState, useEffect} from 'react';\nimport axios from 'axios';\n\nimport { Modal } from '@consta/uikit/Modal';\nimport { Grid, GridItem } from '@consta/uikit/Grid';\nimport { Button } from '@consta/uikit/Button';\nimport { Checkbox } from '@consta/uikit/Checkbox';\nimport { Text } from '@consta/uikit/Text';\nimport { TextField } from '@consta/uikit/TextField';\nimport { Card } from '@consta/uikit/Card';\nimport { DatePicker } from '@consta/uikit/DatePickerCanary';\nimport { Select } from '@consta/uikit/Select';\n\nexport const Calculate = () => {\n    const [content, setContent] = useState([]);\n    const [isModalOpen, setIsModalOpen] = React.useState(false);\n    const [isModalCalendarOpen, setIsModalCalendarOpen] = React.useState(true);\n    const [contentModal, setContentModal] = useState({'status_code':'null', 'id':'null'})\n    const [values, setValues] = useState([]);\n\n    const [reqdata, setReqdata] = useState({\n            'withVariablesInReturn': true,\n            'variables': {\n                'demo': {\n                    'value': true,\n                    'type': 'Boolean',\n                },\n                'no_escalation': {\n                    'value': true,\n                    'type': 'Boolean',\n                },\n                'withoutHydra': {\n                    'value': false,\n                    'type': 'Boolean',\n                },\n                'testNotify': {\n                    'value': false,\n                    'type': 'Boolean',\n                },\n                'migration': {\n                    'value': false,\n                    'type': 'Boolean',\n                },\n                'initiator': {\n                    'value': 'user@example.com',\n                    'type': 'string',\n                },\n                'initiatorEmail': {\n                    'value': 'user@example.com',\n                    'type': 'string',\n                },\n                'serviceName': {\n                    'value': '',\n                    'type': 'string',\n                },\n                'serviceAddress': {\n                    'value': '',\n                    'type': 'string',\n                },\n                'serviceDescription': {\n                    'value': '',\n                    'type': 'string',\n                },\n                'serviceStartDate': {\n                    'value': '',\n                    'type': 'string',\n                },\n                'customerName': {\n                    'value': '',\n                    'type': 'string',\n                },\n                'customerINN': {\n                     'value': '',\n                     'type': 'string',\n                },\n                'customerKPP': {\n                    'value': '',\n                    'type': 'string',\n                },\n                'customerEmail': {\n                    'value': '',\n                    'type': 'string',\n                }\n            }\n    })\n\n    const handleChange = (event) => {\n        setValues({...values, [event.name]: event.value})\n        console.log('ID: ', event, ' value: ', event.value)\n    }\n    const handleClick = (event) => {\n        event.preventDefault();\n        console.log('Data: ', reqdata)\n        if (event.target.textContent=='Отменить') {\n\n        }\n        else {\n            console.log(JSON.stringify(reqdata))\n            axios({\n                    method: \"POST\",\n                    url: window.location.origin + '/calculateservice',\n                    headers: { Authorization : localStorage.getItem('access_token'),\n                               Group : localStorage.getItem('detailRole'),\n                               'Content-Type' : 'application/json', },\n                    data: JSON.stringify(reqdata),\n            }).then(response =>\n                {\n                    setContentModal(JSON.parse(response.data))\n                }\n            ).catch(error => {console.log('Error View: ' + error)})\n        }\n    }\n\n    const divStyle = {\n        marginLeft: '0px',\n        marginTop: '5px',\n        marginBottom: '5px',\n    };\n\n    const divStyleLeft = {\n        marginTop: '10px',\n        marginBottom: '5px',\n    };\n\n    const divStyleRight = {\n        marginTop: '10px',\n        marginBottom: '5px',\n        marginLeft: '10px',\n    };\n\n    useEffect( () => {\n        var str = \"\"\n        for (let key in values) {\n            str = str + key + \" \" + values[key] + \"  \\n\"\n        }\n        setReqdata({...reqdata, 'variables':{...reqdata.variables, 'serviceDescription':{...reqdata.variables.serviceDescription, 'value':str}}})\n    }, [values])\n\n    return(\n        <Fragment>\n            <Grid cols='12' gap='xs' xAlign='left' breakpoint={{\n                xs: { colgap: 'xs', },\n                m: { colgap: 'm', },\n            }}\n            >\n                <GridItem col='12' row='3'/>\n                <GridItem col='1'/>\n                <GridItem col='8'>\n                    <div>\n                        <Text view='brand' font='serif' size='xl' weight='bold' lineHeight='l' align='left'>\n                            Расчет стоимости услуг\n                        </Text>\n                    </div>\n                </GridItem>\n                <GridItem col='3'/>\n                <GridItem col='12' row='3'/>\n                <GridItem col='1' row='4'/>\n                <GridItem col='4' row='4'>\n                    <Card verticalSpace='xl' horizontalSpace='xl'>\n                        <form>\n                            <Grid col='12'>\n                                <GridItem col='3'>\n                                    <Text as='p' view='secondary' font='serif' size='m' weight='bold' lineHeight='s' align='left'>\n                                        Услуга\n                                    </Text>\n                                </GridItem>\n                            </Grid>\n                           { //<Button style={divStyleLeft} label='Расчитать' form='default' size='m' view='primary' onClick = {handleOnClick}/>\n                           }\n                        </form>\n                    </Card>\n                </GridItem>\n            </Grid>\n        </Fragment>\n\n    )\n}","//import logo from './logo.svg';\nimport React, {useEffect, useState} from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom'\nimport { Calculate } from './pages/Calculate';\n\nfunction App() {\n\n  const[people, setPeople] = useState([])\n  useEffect(() => {\n    axios({\n      method: \"GET\",\n      url: \"http://127.0.0.1:8000/api/test-api/\"\n    }).then(response => {\n      setPeople(response.data)\n    })\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <h1>Hello from React to Django</h1>\n      <Routes>\n          <Route path=\"/calculateservice/\" element = {<Calculate/>} />\n      </Routes>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}